{"version":3,"file":"static/js/607.7c2a53b6.chunk.js","mappings":"gRAEaA,EAAU,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACxB,OACE,wBACGA,EAAQC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OACX,2BACE,0BAAI,WAASD,MACb,uBAAIC,MAFGF,EADE,KAQlB,ECkCD,EAzCqB,WACnB,IAAQG,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOP,EAAP,KAAgBQ,EAAhB,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAwBA,OAtBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,sGAEIH,GAAW,GAFf,UAG2BI,EAAAA,EAAAA,IAAeT,GAH1C,OAGUU,EAHV,OAIUC,EAAeD,EAASE,QAAQhB,KACpC,kBAA8B,CAC5BC,GADF,EAAGA,GAEDC,OAFF,EAAOA,OAGLC,QAHF,EAAeA,QAAf,IAMFI,EAAWQ,GAXf,gDAaIJ,EAAS,EAAD,IAbZ,yBAeIF,GAAW,GAff,6EADc,uBAAC,WAAD,wBAmBdQ,EACD,GAAE,CAACb,KAGF,+BACGI,IAAW,SAACU,EAAA,EAAD,IACQ,IAAnBnB,EAAQoB,QACP,yBAAK,+CAEL,SAACrB,EAAD,CAASC,QAASA,IAEnBW,IAAS,yBAAK,2CAGpB,C,mMCzCDU,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAJc,mCAKdC,SAAU,MAGL,IAAMC,EAAgB,mCAAG,sGACPH,EAAAA,EAAAA,IAAU,uBADH,uBACtBI,EADsB,EACtBA,KADsB,kBAEvBA,GAFuB,2CAAH,qDAKhBC,EAAc,mCAAG,WAAMC,GAAN,kFACtBC,EAAS,CACbC,MAAOF,GAFmB,SAILN,EAAAA,EAAAA,IAAU,gBAAiB,CAAEO,OAAAA,IAJxB,uBAIpBH,EAJoB,EAIpBA,KAJoB,kBAKrBA,GALqB,2CAAH,sDAQdK,EAAW,mCAAG,WAAMC,GAAN,yFACFV,EAAAA,EAAAA,IAAA,iBAAoBU,IADlB,uBACjBN,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,sDAKXO,EAAa,mCAAG,WAAMD,GAAN,yFACJV,EAAAA,EAAAA,IAAA,gBAAmBU,EAAnB,aADI,uBACnBN,EADmB,EACnBA,KADmB,kBAEpBA,GAFoB,2CAAH,sDAKbX,EAAc,mCAAG,WAAMiB,GAAN,yFACLV,EAAAA,EAAAA,IAAA,iBAAoBU,EAApB,aADK,uBACpBN,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,qD","sources":["components/Reviews/Reviews.jsx","pages/MovieReviews.jsx","services/API.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\n\nexport const Reviews = ({ reviews }) => {\n  return (\n    <ul>\n      {reviews.map(({ id, author, content }) => (\n        <li key={id}>\n          <h4>Author: {author}</h4>\n          <p>{content}</p>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nReviews.propTypes = {\n  reviews: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      author: PropTypes.string.isRequired,\n      content: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getFilmReviews } from 'services/API';\nimport { Loader } from 'components/Loader/Loader';\nimport { Reviews } from 'components/Reviews/Reviews';\n\nconst MovieReviews = () => {\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function fetchReview() {\n      try {\n        setLoading(true);\n        const response = await getFilmReviews(movieId);\n        const reviewsMovie = response.results.map(\n          ({ id, author, content }) => ({\n            id,\n            author,\n            content,\n          })\n        );\n        setReviews(reviewsMovie);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchReview();\n  }, [movieId]);\n\n  return (\n    <section>\n      {loading && <Loader />}\n      {reviews.length === 0 ? (\n        <div>We don't have any reviews for this movie.</div>\n      ) : (\n        <Reviews reviews={reviews} />\n      )}\n      {error && <div>Something went wrong... &#128576;</div>}\n    </section>\n  );\n};\n\nexport default MovieReviews;\n","import axios from 'axios';\n\nconst API_KEY = 'b2a327199ab710c06f4180e085359e4a';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: API_KEY,\n  language: 'en',\n};\n\nexport const getTrendingFilms = async () => {\n  const { data } = await axios.get('/trending/movie/day');\n  return data;\n};\n\nexport const findFilmByName = async value => {\n  const params = {\n    query: value,\n  };\n  const { data } = await axios.get('/search/movie', { params });\n  return data;\n};\n\nexport const getFullInfo = async idFilm => {\n  const { data } = await axios.get(`/movie/${idFilm}`);\n  return data;\n};\n\nexport const getActorsInfo = async idFilm => {\n  const { data } = await axios.get(`movie/${idFilm}/credits`);\n  return data;\n};\n\nexport const getFilmReviews = async idFilm => {\n  const { data } = await axios.get(`/movie/${idFilm}/reviews`);\n  return data;\n};\n"],"names":["Reviews","reviews","map","id","author","content","movieId","useParams","useState","setReviews","loading","setLoading","error","setError","useEffect","getFilmReviews","response","reviewsMovie","results","fetchReview","Loader","length","axios","api_key","language","getTrendingFilms","data","findFilmByName","value","params","query","getFullInfo","idFilm","getActorsInfo"],"sourceRoot":""}