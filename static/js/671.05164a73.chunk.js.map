{"version":3,"file":"static/js/671.05164a73.chunk.js","mappings":"iUAEaA,E,QAAUC,EAAAA,GAAH,kD,SCEPC,EAAU,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACxB,OACE,SAACH,EAAD,UACGG,EAAOC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,cAAeC,EAAtB,EAAsBA,UAAWC,EAAjC,EAAiCA,aAAjC,OACV,0BACIA,GAGA,gBACEC,IAAG,yCAAoCD,GACvCE,IAAKJ,EACLK,MAAM,SALR,gBAAKF,IAAKG,EAAYF,IAAKJ,EAAeK,MAAM,SAQlD,wBAAKL,IACJC,GACC,yBAAG,cAAYA,MAEf,uBAAG,yBAdEF,EADC,KAqBjB,E,UCgBD,EAtCqB,WACnB,IAAQQ,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOZ,EAAP,KAAea,EAAf,KACA,GAA8BD,EAAAA,EAAAA,WAAS,GAAvC,eAAOE,EAAP,KAAgBC,EAAhB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KAyBA,OAvBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,sGAEIH,GAAW,GAFf,UAG2BI,EAAAA,EAAAA,IAAcT,GAHzC,OAGUU,EAHV,OAIUC,EAAaD,EAASE,KAAKrB,KAC/B,kBAAqD,CACnDC,GADF,EAAGA,GAEDC,cAFF,EAAOA,cAGLC,UAHF,EAAsBA,UAIpBC,aAJF,EAAiCA,aAAjC,IAOFQ,EAAUQ,GAZd,gDAcIJ,EAAS,EAAD,IAdZ,yBAgBIF,GAAW,GAhBf,6EADc,uBAAC,WAAD,wBAoBdQ,EACD,GAAE,CAACb,KAGF,+BACGI,IAAW,SAACU,EAAA,EAAD,KACZ,SAACzB,EAAD,CAASC,OAAQA,IAChBgB,IAAS,yBAAK,2CAGpB,C,mMCtCDS,EAAAA,EAAAA,SAAAA,QAAyB,+BACzBA,EAAAA,EAAAA,SAAAA,OAAwB,CACtBC,QAJc,mCAKdC,SAAU,MAGL,IAAMC,EAAgB,mCAAG,sGACPH,EAAAA,EAAAA,IAAU,uBADH,uBACtBI,EADsB,EACtBA,KADsB,kBAEvBA,GAFuB,2CAAH,qDAKhBC,EAAc,mCAAG,WAAMC,GAAN,kFACtBC,EAAS,CACbC,MAAOF,GAFmB,SAILN,EAAAA,EAAAA,IAAU,gBAAiB,CAAEO,OAAAA,IAJxB,uBAIpBH,EAJoB,EAIpBA,KAJoB,kBAKrBA,GALqB,2CAAH,sDAQdK,EAAW,mCAAG,WAAMC,GAAN,yFACFV,EAAAA,EAAAA,IAAA,iBAAoBU,IADlB,uBACjBN,EADiB,EACjBA,KADiB,kBAElBA,GAFkB,2CAAH,sDAKXV,EAAa,mCAAG,WAAMgB,GAAN,yFACJV,EAAAA,EAAAA,IAAA,gBAAmBU,EAAnB,aADI,uBACnBN,EADmB,EACnBA,KADmB,kBAEpBA,GAFoB,2CAAH,sDAKbO,EAAc,mCAAG,WAAMD,GAAN,yFACLV,EAAAA,EAAAA,IAAA,iBAAoBU,EAApB,aADK,uBACpBN,EADoB,EACpBA,KADoB,kBAErBA,GAFqB,2CAAH,qD","sources":["components/Credits/Credits.styled.jsx","components/Credits/Credits.jsx","pages/MovieCredits.jsx","services/API.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Section = styled.ul`\n  list-style-type: none;\n`;\n","import PropTypes from 'prop-types';\nimport comingSoon from 'images/comingSoon.jpg';\nimport { Section } from 'components/Credits/Credits.styled';\n\nexport const Credits = ({ actors }) => {\n  return (\n    <Section>\n      {actors.map(({ id, original_name, character, profile_path }) => (\n        <li key={id}>\n          {!profile_path ? (\n            <img src={comingSoon} alt={original_name} width=\"100\" />\n          ) : (\n            <img\n              src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n              alt={original_name}\n              width=\"100\"\n            />\n          )}\n          <h4>{original_name}</h4>\n          {character ? (\n            <p>Character: {character}</p>\n          ) : (\n            <p>Character: unknown</p>\n          )}\n        </li>\n      ))}\n    </Section>\n  );\n};\n\nCredits.propTypes = {\n  actors: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      original_name: PropTypes.string.isRequired,\n      character: PropTypes.string.isRequired,\n      profile_path: PropTypes.string,\n    })\n  ),\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\nimport { Credits } from 'components/Credits/Credits';\nimport { getActorsInfo } from 'services/API';\n\nconst MovieCredits = () => {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    async function fetchActors() {\n      try {\n        setLoading(true);\n        const response = await getActorsInfo(movieId);\n        const actorsList = response.cast.map(\n          ({ id, original_name, character, profile_path }) => ({\n            id,\n            original_name,\n            character,\n            profile_path,\n          })\n        );\n        setActors(actorsList);\n      } catch (error) {\n        setError(error);\n      } finally {\n        setLoading(false);\n      }\n    }\n    fetchActors();\n  }, [movieId]);\n\n  return (\n    <section>\n      {loading && <Loader />}\n      <Credits actors={actors} />\n      {error && <div>Something went wrong... &#128576;</div>}\n    </section>\n  );\n};\n\nexport default MovieCredits;\n","import axios from 'axios';\n\nconst API_KEY = 'b2a327199ab710c06f4180e085359e4a';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: API_KEY,\n  language: 'en',\n};\n\nexport const getTrendingFilms = async () => {\n  const { data } = await axios.get('/trending/movie/day');\n  return data;\n};\n\nexport const findFilmByName = async value => {\n  const params = {\n    query: value,\n  };\n  const { data } = await axios.get('/search/movie', { params });\n  return data;\n};\n\nexport const getFullInfo = async idFilm => {\n  const { data } = await axios.get(`/movie/${idFilm}`);\n  return data;\n};\n\nexport const getActorsInfo = async idFilm => {\n  const { data } = await axios.get(`movie/${idFilm}/credits`);\n  return data;\n};\n\nexport const getFilmReviews = async idFilm => {\n  const { data } = await axios.get(`/movie/${idFilm}/reviews`);\n  return data;\n};\n"],"names":["Section","styled","Credits","actors","map","id","original_name","character","profile_path","src","alt","width","comingSoon","movieId","useParams","useState","setActors","loading","setLoading","error","setError","useEffect","getActorsInfo","response","actorsList","cast","fetchActors","Loader","axios","api_key","language","getTrendingFilms","data","findFilmByName","value","params","query","getFullInfo","idFilm","getFilmReviews"],"sourceRoot":""}